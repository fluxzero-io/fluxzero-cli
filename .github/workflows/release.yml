name: Auto Release and Version Bump

on:
  push:
    branches:
      - main

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bump version and push tag
        uses: mathieudutour/github-tag-action@v6.2
        id: tag_version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: main
          default_bump: patch
          tag_prefix: ""

  build-and-test:
    runs-on: ubuntu-latest
    needs: version
    outputs:
      jar-name: fluxzero-cli-${{ needs.version.outputs.version }}.jar
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build and test
        run: ./gradlew build shadowJar :cli:generateScripts -PappVersion=${{ needs.version.outputs.version }}

      - name: Test JAR functionality
        run: |
          echo "Testing CLI JAR with basic commands..."
          java -jar cli/build/libs/fluxzero-cli-${{ needs.version.outputs.version }}.jar version
          java -jar cli/build/libs/fluxzero-cli-${{ needs.version.outputs.version }}.jar templates list
          echo "CLI JAR functionality test successful!"
          
          echo "Testing API JAR startup..."
          # Test that API JAR can start and respond to health check
          timeout 30s bash -c '
            java -jar api/build/libs/flux-api-${{ needs.version.outputs.version }}.jar &
            API_PID=$!
            sleep 15
            if curl -f http://localhost:8080/api/health; then
              echo "API health check successful!"
            else
              echo "API health check failed!"
              kill $API_PID 2>/dev/null || true
              exit 1
            fi
            kill $API_PID 2>/dev/null || true
          ' || {
            echo "API JAR test failed!"
            exit 1
          }
          echo "API JAR functionality test successful!"

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: |
            cli/build/libs/fluxzero-cli-${{ needs.version.outputs.version }}.jar
            api/build/libs/flux-api-${{ needs.version.outputs.version }}.jar
            cli/build/release-scripts/
          retention-days: 1

  native-build:
    needs: [version, build-and-test]
    uses: ./.github/workflows/native-build.yml
    with:
      version: ${{ needs.version.outputs.version }}
      jar-name: ${{ needs.build-and-test.outputs.jar-name }}

  release:
    runs-on: ubuntu-latest
    needs: [version, build-and-test, native-build]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/

      - name: Rename files
        run: |
          mkdir -p build/libs
          mv build/cli/build/libs/${{ needs.build-and-test.outputs.jar-name }} build/libs/fluxzero-cli.jar
          mv build/api/build/libs/flux-api-${{ needs.version.outputs.version }}.jar build/libs/flux-api.jar
          
          # Copy release scripts to expected location
          cp -r build/cli/build/release-scripts build/

      - name: Verify JAR functionality
        run: |
          echo "Testing JAR with 'templates list' command..."
          java -jar build/libs/fluxzero-cli.jar templates list
          if [ $? -ne 0 ]; then
            echo "JAR verification failed!"
            exit 1
          fi
          echo "JAR verification successful!"

      - name: Download native artifacts
        uses: actions/download-artifact@v4
        with:
          path: native-artifacts

      - name: Prepare native executables for release
        run: |
          mkdir -p build/native-releases
          cp native-artifacts/flux-linux-amd64/flux build/native-releases/flux-linux-amd64
          cp native-artifacts/flux-macos-amd64/flux build/native-releases/flux-macos-amd64
          cp native-artifacts/flux-macos-arm64/flux build/native-releases/flux-macos-arm64
          cp native-artifacts/flux-windows-amd64/flux.exe build/native-releases/flux-windows-amd64.exe
          chmod +x build/native-releases/flux-*

      - name: Verify install scripts
        run: |
          echo "Testing install scripts with native binaries..."
          
          # Test bash install script with Linux binary
          echo "Testing bash install script..."
          export TEST_HOME=$(mktemp -d)
          export HOME=$TEST_HOME
          
          # Use Linux native binary for testing
          LINUX_BINARY="$(pwd)/build/native-releases/flux-linux-amd64"
          bash build/release-scripts/install.sh --install-path --binary="$LINUX_BINARY"
          
          # Check if the native binary was installed
          if [ ! -x "$TEST_HOME/.fluxzero/bin/fz" ]; then
            echo "Install script failed to install native binary!"
            exit 1
          fi
          
          # Test the installed CLI
          $TEST_HOME/.fluxzero/bin/fz version
          if [ $? -ne 0 ]; then
            echo "Installed native binary verification failed!"
            exit 1
          fi
          
          # Check if fz was created in /usr/local/bin
          if [ ! -x "/usr/local/bin/fz" ]; then
            echo "Install script failed to create /usr/local/bin/fz!"
            exit 1
          fi
          
          # Test the fz command directly
          fz version
          if [ $? -ne 0 ]; then
            echo "fz command verification failed!"
            exit 1
          fi
          
          # Also test templates list command via fz
          fz templates list
          if [ $? -ne 0 ]; then
            echo "fz templates list command failed!"
            exit 1
          fi
          
          echo "Bash install script verification successful!"
          
          # Test PowerShell install script syntax (we can't fully test on Linux)
          echo "Verifying PowerShell script syntax..."
          if command -v pwsh >/dev/null 2>&1; then
            # Just check PowerShell syntax without executing
            pwsh -Command "try { \$null = [System.Management.Automation.PSParser]::Tokenize((Get-Content 'build/release-scripts/install.ps1' -Raw), [ref]\$null) } catch { Write-Host \"PowerShell Syntax Error: \$(\$_.Exception.Message)\"; exit 1 }"
            echo "PowerShell script syntax verification successful!"
          else
            echo "PowerShell not available - skipping syntax check"
          fi
          
          echo "Install scripts verification successful!"
          
          # Cleanup
          sudo rm -f /usr/local/bin/fz
          rm -rf $TEST_HOME

      - name: Test uninstall scripts
        run: |
          echo "Testing uninstall scripts after installation..."
          
          # Test bash uninstall script with installed CLI
          echo "Testing bash uninstall script..."
          export TEST_HOME=$(mktemp -d)
          export HOME=$TEST_HOME
          
          # Install first using Linux binary
          LINUX_BINARY="$(pwd)/build/native-releases/flux-linux-amd64"
          bash build/release-scripts/install.sh --install-path --binary="$LINUX_BINARY"
          
          # Verify installation exists
          if [ ! -x "$TEST_HOME/.fluxzero/bin/fz" ]; then
            echo "ERROR: Installation failed - cannot test uninstall!"
            exit 1
          fi
          
          # Test uninstall
          bash build/release-scripts/uninstall.sh --force
          
          # Verify everything was removed
          if [ -d "$TEST_HOME/.fluxzero" ]; then
            echo "ERROR: Uninstall script failed to remove .fluxzero directory!"
            exit 1
          fi
          
          # Verify system link was removed
          if [ -f "/usr/local/bin/fz" ]; then
            echo "ERROR: Uninstall script failed to remove /usr/local/bin/fz!"
            exit 1
          fi
          
          echo "Bash uninstall script test successful!"
          
          # Test legacy installation cleanup
          echo "Testing legacy installation cleanup..."
          export TEST_HOME2=$(mktemp -d)
          export HOME=$TEST_HOME2
          
          # Create a fake legacy installation
          mkdir -p "$TEST_HOME2/.flux"
          echo "fake jar content" > "$TEST_HOME2/.flux/fluxzero-cli.jar"
          
          # Run uninstall script
          bash build/release-scripts/uninstall.sh --force
          
          # Verify legacy directory was removed
          if [ -d "$TEST_HOME2/.flux" ]; then
            echo "ERROR: Uninstall script failed to remove legacy .flux directory!"
            exit 1
          fi
          
          echo "Legacy cleanup test successful!"
          
          # Test PowerShell uninstall script syntax
          echo "Testing PowerShell uninstall script syntax..."
          if command -v pwsh >/dev/null 2>&1; then
            # Just check PowerShell syntax without executing
            pwsh -Command "try { \$null = [System.Management.Automation.PSParser]::Tokenize((Get-Content 'build/release-scripts/uninstall.ps1' -Raw), [ref]\$null) } catch { Write-Host \"PowerShell Uninstall Syntax Error: \$(\$_.Exception.Message)\"; exit 1 }"
            echo "PowerShell uninstall script syntax verification successful!"
          else
            echo "PowerShell not available - skipping uninstall syntax check"
          fi
          
          echo "Uninstall scripts verification successful!"
          
          # Cleanup
          rm -rf $TEST_HOME $TEST_HOME2

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.version }}
          name: Release ${{ needs.version.outputs.version }}
          files: |
            build/libs/fluxzero-cli.jar
            build/libs/flux-api.jar
            build/release-scripts/install.sh
            build/release-scripts/install.ps1
            build/release-scripts/uninstall.sh
            build/release-scripts/uninstall.ps1
            build/native-releases/flux-linux-amd64
            build/native-releases/flux-macos-amd64
            build/native-releases/flux-macos-arm64
            build/native-releases/flux-windows-amd64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}