name: Native Image Build

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to build (e.g., 1.2.3)'
        required: false
        type: string
        default: 'dev'
      jar-name:
        description: 'JAR filename to use for native build'
        required: false
        type: string
        default: 'fluxzero-cli-dev-all.jar'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.2.3)'
        required: false
        type: string
        default: 'dev'
      jar-name:
        description: 'JAR filename to use for native build'
        required: false
        type: string
        default: 'fluxzero-cli-dev-all.jar'

jobs:
  native-build:
    name: Build Native Image - ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: linux-amd64
            runner: ubuntu-latest
            artifact-name: flux-linux-amd64
          - os: macos-amd64
            runner: macos-13
            artifact-name: flux-macos-amd64
          - os: macos-arm64
            runner: macos-14
            artifact-name: flux-macos-arm64
          - os: windows-amd64
            runner: windows-latest
            artifact-name: flux-windows-amd64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: build/

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build native image
        timeout-minutes: 15
        shell: bash
        run: |
          echo "Building ${{ matrix.os }} native image"
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Host: $(uname -m), CPU cores: $(sysctl -n hw.ncpu)"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Host: Windows, CPU cores: $NUMBER_OF_PROCESSORS"
            systeminfo | findstr "Total Physical Memory"
          else
            echo "Host: $(uname -m), CPU cores: $(nproc), Memory: $(free -h | head -2)"
          fi
          # Native compilation needs to compile classes but can reuse cached artifacts
          # Skip tests since we already ran them, but allow compilation for native-image
          ./gradlew :cli:nativeCompile -x test --info -PappVersion=${{ inputs.version }}

      - name: Verify native image
        shell: bash
        run: |
          echo "Testing native executable..."
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ./cli/build/native/nativeCompile/flux.exe version
            ./cli/build/native/nativeCompile/flux.exe templates list
          else
            ./cli/build/native/nativeCompile/flux version
            ./cli/build/native/nativeCompile/flux templates list
          fi
          echo "Native image verification successful!"

      - name: Integration test - Generate example project
        shell: bash
        run: |
          echo "Running integration test - generating example project..."
          
          # Create test directory and navigate to it
          mkdir -p test-workspace
          cd test-workspace
          
          # Run the CLI to generate an example project
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ../cli/build/native/nativeCompile/flux.exe init --template=flux-java-single --name=example-project --package=com.example.project --build=maven --git
          else
            ../cli/build/native/nativeCompile/flux init --template=flux-java-single --name=example-project --package=com.example.project --build=maven --git
          fi
          
          # Verify the project was created
          if [ ! -d "example-project" ]; then
            echo "ERROR: example-project directory was not created!"
            exit 1
          fi
          
          # Check for key files that should exist in a Java project
          cd example-project
          if [ ! -f "pom.xml" ]; then
            echo "ERROR: pom.xml not found!"
            exit 1
          fi
          
          if [ ! -d "src/main/java" ]; then
            echo "ERROR: src/main/java directory not found!"
            exit 1
          fi
          
          # Verify git repository was initialized
          if [ ! -d ".git" ]; then
            echo "ERROR: Git repository was not initialized!"
            exit 1
          fi
          
          # List the generated structure for debugging
          echo "Generated project structure:"
          find . -type f | head -20
          
          echo "Integration test successful - example project generated correctly!"

      - name: Test installation script
        shell: bash
        run: |
          echo "Testing installation script with native binary..."
          
          # Generate scripts with correct version for testing
          ./gradlew :cli:generateScripts -PappVersion=${{ inputs.version }}
          
          # Create a test home directory to avoid conflicts
          TEST_HOME=$(mktemp -d)
          export HOME=$TEST_HOME
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Test PowerShell script
            BINARY_PATH="$(pwd)/cli/build/native/nativeCompile/flux.exe"
            INSTALL_SCRIPT="$(pwd)/cli/build/release-scripts/install.ps1"
            
            echo "Testing PowerShell installation script..."
            pwsh -File "$INSTALL_SCRIPT" -Binary "$BINARY_PATH" -InstallPath
            
            # Debug: List what was actually installed
            echo "Contents of $TEST_HOME/.fluxzero/bin/:"
            ls -la "$TEST_HOME/.fluxzero/bin/" || echo "Directory does not exist"
            
            # Verify installation
            if [ ! -f "$TEST_HOME/.fluxzero/bin/fz.exe" ]; then
              echo "ERROR: fz.exe was not installed correctly!"
              exit 1
            fi
            
            # Test the installed binary
            "$TEST_HOME/.fluxzero/bin/fz.exe" version
            if [ $? -ne 0 ]; then
              echo "ERROR: Installed flux.exe failed to run!"
              exit 1
            fi
            
          else
            # Test bash script
            BINARY_PATH="$(pwd)/cli/build/native/nativeCompile/flux"
            INSTALL_SCRIPT="$(pwd)/cli/build/release-scripts/install.sh"
            
            echo "Testing bash installation script..."
            bash "$INSTALL_SCRIPT" --binary="$BINARY_PATH" --install-path
            
            # Verify installation
            if [ ! -f "$TEST_HOME/.fluxzero/bin/fz" ]; then
              echo "ERROR: fz was not installed correctly!"
              exit 1
            fi
            
            # Test the installed binary
            "$TEST_HOME/.fluxzero/bin/fz" version
            if [ $? -ne 0 ]; then
              echo "ERROR: Installed flux failed to run!"
              exit 1
            fi
            
            # Test the PATH installation (fz command)
            if [[ "$RUNNER_OS" == "Linux" ]]; then
              # On Linux, test that fz was created and works
              if [ -x "/usr/local/bin/fz" ]; then
                /usr/local/bin/fz version
                if [ $? -ne 0 ]; then
                  echo "ERROR: fz command failed to run!"
                  exit 1
                fi
              else
                echo "WARNING: /usr/local/bin/fz was not created (permissions issue expected in CI)"
              fi
            fi
          fi
          
          echo "Installation script test successful!"

      - name: Test uninstall script
        shell: bash
        run: |
          echo "Testing uninstall script..."
          
          # Generate scripts with correct version for testing  
          ./gradlew :cli:generateScripts -PappVersion=${{ inputs.version }}
          
          # Create a test home directory and install first
          TEST_HOME=$(mktemp -d)
          export HOME=$TEST_HOME
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Test PowerShell scripts
            BINARY_PATH="$(pwd)/cli/build/native/nativeCompile/flux.exe"
            INSTALL_SCRIPT="$(pwd)/cli/build/release-scripts/install.ps1"
            UNINSTALL_SCRIPT="$(pwd)/cli/build/release-scripts/uninstall.ps1"
            
            echo "Installing first..."
            pwsh -File "$INSTALL_SCRIPT" -Binary "$BINARY_PATH" -InstallPath
            
            # Verify installation exists
            if [ ! -f "$TEST_HOME/.fluxzero/bin/fz.exe" ]; then
              echo "ERROR: Installation failed - cannot test uninstall!"
              exit 1
            fi
            
            echo "Testing PowerShell uninstall script..."
            pwsh -File "$UNINSTALL_SCRIPT" -Force
            
            # Verify everything was removed
            if [ -d "$TEST_HOME/.fluxzero" ]; then
              echo "ERROR: Uninstall script failed to remove .fluxzero directory!"
              exit 1
            fi
            
          else
            # Test bash scripts
            BINARY_PATH="$(pwd)/cli/build/native/nativeCompile/flux"
            INSTALL_SCRIPT="$(pwd)/cli/build/release-scripts/install.sh"
            UNINSTALL_SCRIPT="$(pwd)/cli/build/release-scripts/uninstall.sh"
            
            echo "Installing first..."
            bash "$INSTALL_SCRIPT" --binary="$BINARY_PATH" --install-path
            
            # Verify installation exists
            if [ ! -f "$TEST_HOME/.fluxzero/bin/fz" ]; then
              echo "ERROR: Installation failed - cannot test uninstall!"
              exit 1
            fi
            
            echo "Testing bash uninstall script..."
            bash "$UNINSTALL_SCRIPT" --force
            
            # Verify everything was removed
            if [ -d "$TEST_HOME/.fluxzero" ]; then
              echo "ERROR: Uninstall script failed to remove .fluxzero directory!"
              exit 1
            fi
            
            # Check if system link was removed (on Linux)
            if [[ "$RUNNER_OS" == "Linux" ]] && [ -f "/usr/local/bin/fz" ]; then
              echo "ERROR: Uninstall script failed to remove /usr/local/bin/fz!"
              exit 1
            fi
          fi
          
          echo "Uninstall script test successful!"
          
          # Cleanup
          rm -rf "$TEST_HOME"
          if [[ "$RUNNER_OS" == "Linux" ]] && [ -f "/usr/local/bin/fz" ]; then
            sudo rm -f /usr/local/bin/fz || true
          fi

      - name: Upload native executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ./cli/build/native/nativeCompile/flux${{ runner.os == 'Windows' && '.exe' || '' }}
          retention-days: 30